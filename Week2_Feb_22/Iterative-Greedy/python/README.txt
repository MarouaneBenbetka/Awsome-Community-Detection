# IG README

## Iterative Greedy Community Detection Algorithm

This project implements the Iterative Greedy algorithm for community detection. The primary components of the project are organized in the following modules:

### 1. `utils`

The `utils` module contains various utility functions to assist in reading and saving files.

- **iterative_greedy_algorithm.py**: Implementation of the Iterative Greedy algorithm, including all its phases.
- **communities_network.py**: Implementation of known algorithms on communities, such as calculating NMI score, modularity, etc.
- **utils.py**: Helper functions for file I/O and other utilities.
- **visualization_animation.py**: Custom Python module for building animations depicting the trace of the algorithm frame by frame using Matplotlib.

### 2. Notebooks

The project includes three Jupyter notebooks for testing different aspects of the Iterative Greedy algorithm.

- **IG.ipynb**: This notebook presents the original algorithm tested on various datasets.
- **IG_with_best_beta.ipynb**: In this notebook, a variation of the algorithm tests all values of the hyperparameter beta to obtain the best modularity.
- **MSIG.ipynb**: This notebook introduces a variation of the algorithm called MSIG. It is an extension motivated by the semi-random nature of the constructive procedure **GCP()**. The MSIG algorithm executes the Iterative Greedy (IG) algorithm over each solution generated by the constructive procedure **GCP()**.

### Output Folder

The `output` folder contains different animations and predicted labels generated using our Iterative Greedy algorithm. These visualizations provide insights into the community detection process and showcase the algorithm's performance on various datasets.

### Implementation Details

All algorithms have been implemented from scratch, ensuring a comprehensive understanding of the underlying concepts and providing a solid foundation for future enhancements and modifications.

## Getting Started

To use the Iterative Greedy algorithm for community detection, follow these steps:

1. Import the necessary modules from the `utils` package.
2. Utilize the functions provided in `iterative_greedy_algorithm.py` for community detection.
3. Explore the results using the functions in `communities_network.py`.

Refer to the provided notebooks for detailed examples and use cases.

